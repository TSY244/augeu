// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostVolunteerAcceptMissionHandlerFunc turns a function with the right signature into a post volunteer accept mission handler
type PostVolunteerAcceptMissionHandlerFunc func(PostVolunteerAcceptMissionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostVolunteerAcceptMissionHandlerFunc) Handle(params PostVolunteerAcceptMissionParams) middleware.Responder {
	return fn(params)
}

// PostVolunteerAcceptMissionHandler interface for that can handle valid post volunteer accept mission params
type PostVolunteerAcceptMissionHandler interface {
	Handle(PostVolunteerAcceptMissionParams) middleware.Responder
}

// NewPostVolunteerAcceptMission creates a new http.Handler for the post volunteer accept mission operation
func NewPostVolunteerAcceptMission(ctx *middleware.Context, handler PostVolunteerAcceptMissionHandler) *PostVolunteerAcceptMission {
	return &PostVolunteerAcceptMission{Context: ctx, Handler: handler}
}

/*
	PostVolunteerAcceptMission swagger:route POST /volunteer/acceptMission postVolunteerAcceptMission

PostVolunteerAcceptMission post volunteer accept mission API
*/
type PostVolunteerAcceptMission struct {
	Context *middleware.Context
	Handler PostVolunteerAcceptMissionHandler
}

func (o *PostVolunteerAcceptMission) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostVolunteerAcceptMissionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostVolunteerAcceptMissionBody post volunteer accept mission body
//
// swagger:model PostVolunteerAcceptMissionBody
type PostVolunteerAcceptMissionBody struct {

	// 任务时间
	// Required: true
	TaskID *string `json:"taskId"`

	// 志愿者id
	// Required: true
	VolunteerID *string `json:"volunteerId"`
}

// Validate validates this post volunteer accept mission body
func (o *PostVolunteerAcceptMissionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolunteerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostVolunteerAcceptMissionBody) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"taskId", "body", o.TaskID); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerAcceptMissionBody) validateVolunteerID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"volunteerId", "body", o.VolunteerID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post volunteer accept mission body based on context it is used
func (o *PostVolunteerAcceptMissionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostVolunteerAcceptMissionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostVolunteerAcceptMissionBody) UnmarshalBinary(b []byte) error {
	var res PostVolunteerAcceptMissionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
