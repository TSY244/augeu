// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Volunteer volunteer
//
// swagger:model Volunteer
type Volunteer struct {

	// 头像
	// Required: true
	Avatar *string `json:"avatar"`

	// 邮箱
	// Required: true
	Email *string `json:"email"`

	// 身份证反面
	// Required: true
	IDCardBack *string `json:"idCardBack"`

	// 身份证正面
	// Required: true
	IDCardFront *string `json:"idCardFront"`

	// 身份证号
	// Required: true
	IDNumber *string `json:"idNumber"`

	// 积分
	// Required: true
	Integral *int64 `json:"integral"`

	// 是否注册
	// Required: true
	IsRegister *bool `json:"isRegister"`

	// 电话
	// Required: true
	Phone *string `json:"phone"`

	// 真实姓名
	// Required: true
	RealName *string `json:"realName"`

	// tasks
	// Required: true
	Tasks []*Task `json:"tasks"`

	// 志愿者描述
	// Required: true
	VolunteerDesc *string `json:"volunteerDesc"`

	// 志愿者id
	// Required: true
	VolunteerID *string `json:"volunteerId"`

	// 志愿者名字
	// Required: true
	VolunteerName *string `json:"volunteerName"`

	// 志愿者时间
	// Required: true
	VolunteerTime *string `json:"volunteerTime"`
}

// Validate validates this volunteer
func (m *Volunteer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDCardBack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDCardFront(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRegister(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolunteerDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolunteerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolunteerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolunteerTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Volunteer) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateIDCardBack(formats strfmt.Registry) error {

	if err := validate.Required("idCardBack", "body", m.IDCardBack); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateIDCardFront(formats strfmt.Registry) error {

	if err := validate.Required("idCardFront", "body", m.IDCardFront); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateIDNumber(formats strfmt.Registry) error {

	if err := validate.Required("idNumber", "body", m.IDNumber); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateIntegral(formats strfmt.Registry) error {

	if err := validate.Required("integral", "body", m.Integral); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateIsRegister(formats strfmt.Registry) error {

	if err := validate.Required("isRegister", "body", m.IsRegister); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validatePhone(formats strfmt.Registry) error {

	if err := validate.Required("phone", "body", m.Phone); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateRealName(formats strfmt.Registry) error {

	if err := validate.Required("realName", "body", m.RealName); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateTasks(formats strfmt.Registry) error {

	if err := validate.Required("tasks", "body", m.Tasks); err != nil {
		return err
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Volunteer) validateVolunteerDesc(formats strfmt.Registry) error {

	if err := validate.Required("volunteerDesc", "body", m.VolunteerDesc); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateVolunteerID(formats strfmt.Registry) error {

	if err := validate.Required("volunteerId", "body", m.VolunteerID); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateVolunteerName(formats strfmt.Registry) error {

	if err := validate.Required("volunteerName", "body", m.VolunteerName); err != nil {
		return err
	}

	return nil
}

func (m *Volunteer) validateVolunteerTime(formats strfmt.Registry) error {

	if err := validate.Required("volunteerTime", "body", m.VolunteerTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this volunteer based on the context it is used
func (m *Volunteer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Volunteer) contextValidateTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tasks); i++ {

		if m.Tasks[i] != nil {

			if swag.IsZero(m.Tasks[i]) { // not required
				return nil
			}

			if err := m.Tasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Volunteer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Volunteer) UnmarshalBinary(b []byte) error {
	var res Volunteer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
