// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostAdminResetPasswordHandlerFunc turns a function with the right signature into a post admin reset password handler
type PostAdminResetPasswordHandlerFunc func(PostAdminResetPasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAdminResetPasswordHandlerFunc) Handle(params PostAdminResetPasswordParams) middleware.Responder {
	return fn(params)
}

// PostAdminResetPasswordHandler interface for that can handle valid post admin reset password params
type PostAdminResetPasswordHandler interface {
	Handle(PostAdminResetPasswordParams) middleware.Responder
}

// NewPostAdminResetPassword creates a new http.Handler for the post admin reset password operation
func NewPostAdminResetPassword(ctx *middleware.Context, handler PostAdminResetPasswordHandler) *PostAdminResetPassword {
	return &PostAdminResetPassword{Context: ctx, Handler: handler}
}

/*
	PostAdminResetPassword swagger:route POST /admin/resetPassword postAdminResetPassword

PostAdminResetPassword post admin reset password API
*/
type PostAdminResetPassword struct {
	Context *middleware.Context
	Handler PostAdminResetPasswordHandler
}

func (o *PostAdminResetPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAdminResetPasswordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostAdminResetPasswordBody post admin reset password body
//
// swagger:model PostAdminResetPasswordBody
type PostAdminResetPasswordBody struct {

	// 新密码
	// Required: true
	NewPassword *string `json:"newPassword"`

	// 用户id
	// Required: true
	Userid *string `json:"userid"`
}

// Validate validates this post admin reset password body
func (o *PostAdminResetPasswordBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNewPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAdminResetPasswordBody) validateNewPassword(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"newPassword", "body", o.NewPassword); err != nil {
		return err
	}

	return nil
}

func (o *PostAdminResetPasswordBody) validateUserid(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"userid", "body", o.Userid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post admin reset password body based on context it is used
func (o *PostAdminResetPasswordBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAdminResetPasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAdminResetPasswordBody) UnmarshalBinary(b []byte) error {
	var res PostAdminResetPasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
