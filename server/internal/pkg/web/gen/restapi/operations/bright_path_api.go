// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBrightPathAPI creates a new BrightPath instance
func NewBrightPathAPI(spec *loads.Document) *BrightPathAPI {
	return &BrightPathAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		GetAdminViewRealTimeVolunteerHelpInfoHandler: GetAdminViewRealTimeVolunteerHelpInfoHandlerFunc(func(params GetAdminViewRealTimeVolunteerHelpInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation GetAdminViewRealTimeVolunteerHelpInfo has not yet been implemented")
		}),
		GetVersionHandler: GetVersionHandlerFunc(func(params GetVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation GetVersion has not yet been implemented")
		}),
		GetVolunteerViewOwnMissionHistoryHandler: GetVolunteerViewOwnMissionHistoryHandlerFunc(func(params GetVolunteerViewOwnMissionHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation GetVolunteerViewOwnMissionHistory has not yet been implemented")
		}),
		PostAdminApproveVolunteerRegistrationHandler: PostAdminApproveVolunteerRegistrationHandlerFunc(func(params PostAdminApproveVolunteerRegistrationParams) middleware.Responder {
			return middleware.NotImplemented("operation PostAdminApproveVolunteerRegistration has not yet been implemented")
		}),
		PostAdminDeleteVolunteerHandler: PostAdminDeleteVolunteerHandlerFunc(func(params PostAdminDeleteVolunteerParams) middleware.Responder {
			return middleware.NotImplemented("operation PostAdminDeleteVolunteer has not yet been implemented")
		}),
		PostAdminResetPasswordHandler: PostAdminResetPasswordHandlerFunc(func(params PostAdminResetPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation PostAdminResetPassword has not yet been implemented")
		}),
		PostAdminResetVolunteerAvatarToDefaultHandler: PostAdminResetVolunteerAvatarToDefaultHandlerFunc(func(params PostAdminResetVolunteerAvatarToDefaultParams) middleware.Responder {
			return middleware.NotImplemented("operation PostAdminResetVolunteerAvatarToDefault has not yet been implemented")
		}),
		PostAdminUpdateVolunteerInfoHandler: PostAdminUpdateVolunteerInfoHandlerFunc(func(params PostAdminUpdateVolunteerInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation PostAdminUpdateVolunteerInfo has not yet been implemented")
		}),
		PostLoginHandler: PostLoginHandlerFunc(func(params PostLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation PostLogin has not yet been implemented")
		}),
		PostLogoutHandler: PostLogoutHandlerFunc(func(params PostLogoutParams) middleware.Responder {
			return middleware.NotImplemented("operation PostLogout has not yet been implemented")
		}),
		PostResetPasswordHandler: PostResetPasswordHandlerFunc(func(params PostResetPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation PostResetPassword has not yet been implemented")
		}),
		PostUpdateAvatarHandler: PostUpdateAvatarHandlerFunc(func(params PostUpdateAvatarParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUpdateAvatar has not yet been implemented")
		}),
		PostUploadAvatarHandler: PostUploadAvatarHandlerFunc(func(params PostUploadAvatarParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUploadAvatar has not yet been implemented")
		}),
		PostVolunteerAcceptMissionHandler: PostVolunteerAcceptMissionHandlerFunc(func(params PostVolunteerAcceptMissionParams) middleware.Responder {
			return middleware.NotImplemented("operation PostVolunteerAcceptMission has not yet been implemented")
		}),
		PostVolunteerConnectGuideCaneCameraHandler: PostVolunteerConnectGuideCaneCameraHandlerFunc(func(params PostVolunteerConnectGuideCaneCameraParams) middleware.Responder {
			return middleware.NotImplemented("operation PostVolunteerConnectGuideCaneCamera has not yet been implemented")
		}),
		PostVolunteerRegisterHandler: PostVolunteerRegisterHandlerFunc(func(params PostVolunteerRegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation PostVolunteerRegister has not yet been implemented")
		}),
		PostVolunteerUploadIDBackHandler: PostVolunteerUploadIDBackHandlerFunc(func(params PostVolunteerUploadIDBackParams) middleware.Responder {
			return middleware.NotImplemented("operation PostVolunteerUploadIDBack has not yet been implemented")
		}),
		PostVolunteerUploadIDFrontHandler: PostVolunteerUploadIDFrontHandlerFunc(func(params PostVolunteerUploadIDFrontParams) middleware.Responder {
			return middleware.NotImplemented("operation PostVolunteerUploadIDFront has not yet been implemented")
		}),
	}
}

/*BrightPathAPI BrightPath api */
type BrightPathAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// GetAdminViewRealTimeVolunteerHelpInfoHandler sets the operation handler for the get admin view real time volunteer help info operation
	GetAdminViewRealTimeVolunteerHelpInfoHandler GetAdminViewRealTimeVolunteerHelpInfoHandler
	// GetVersionHandler sets the operation handler for the get version operation
	GetVersionHandler GetVersionHandler
	// GetVolunteerViewOwnMissionHistoryHandler sets the operation handler for the get volunteer view own mission history operation
	GetVolunteerViewOwnMissionHistoryHandler GetVolunteerViewOwnMissionHistoryHandler
	// PostAdminApproveVolunteerRegistrationHandler sets the operation handler for the post admin approve volunteer registration operation
	PostAdminApproveVolunteerRegistrationHandler PostAdminApproveVolunteerRegistrationHandler
	// PostAdminDeleteVolunteerHandler sets the operation handler for the post admin delete volunteer operation
	PostAdminDeleteVolunteerHandler PostAdminDeleteVolunteerHandler
	// PostAdminResetPasswordHandler sets the operation handler for the post admin reset password operation
	PostAdminResetPasswordHandler PostAdminResetPasswordHandler
	// PostAdminResetVolunteerAvatarToDefaultHandler sets the operation handler for the post admin reset volunteer avatar to default operation
	PostAdminResetVolunteerAvatarToDefaultHandler PostAdminResetVolunteerAvatarToDefaultHandler
	// PostAdminUpdateVolunteerInfoHandler sets the operation handler for the post admin update volunteer info operation
	PostAdminUpdateVolunteerInfoHandler PostAdminUpdateVolunteerInfoHandler
	// PostLoginHandler sets the operation handler for the post login operation
	PostLoginHandler PostLoginHandler
	// PostLogoutHandler sets the operation handler for the post logout operation
	PostLogoutHandler PostLogoutHandler
	// PostResetPasswordHandler sets the operation handler for the post reset password operation
	PostResetPasswordHandler PostResetPasswordHandler
	// PostUpdateAvatarHandler sets the operation handler for the post update avatar operation
	PostUpdateAvatarHandler PostUpdateAvatarHandler
	// PostUploadAvatarHandler sets the operation handler for the post upload avatar operation
	PostUploadAvatarHandler PostUploadAvatarHandler
	// PostVolunteerAcceptMissionHandler sets the operation handler for the post volunteer accept mission operation
	PostVolunteerAcceptMissionHandler PostVolunteerAcceptMissionHandler
	// PostVolunteerConnectGuideCaneCameraHandler sets the operation handler for the post volunteer connect guide cane camera operation
	PostVolunteerConnectGuideCaneCameraHandler PostVolunteerConnectGuideCaneCameraHandler
	// PostVolunteerRegisterHandler sets the operation handler for the post volunteer register operation
	PostVolunteerRegisterHandler PostVolunteerRegisterHandler
	// PostVolunteerUploadIDBackHandler sets the operation handler for the post volunteer upload ID back operation
	PostVolunteerUploadIDBackHandler PostVolunteerUploadIDBackHandler
	// PostVolunteerUploadIDFrontHandler sets the operation handler for the post volunteer upload ID front operation
	PostVolunteerUploadIDFrontHandler PostVolunteerUploadIDFrontHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *BrightPathAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *BrightPathAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *BrightPathAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *BrightPathAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *BrightPathAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *BrightPathAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *BrightPathAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *BrightPathAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *BrightPathAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the BrightPathAPI
func (o *BrightPathAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.GetAdminViewRealTimeVolunteerHelpInfoHandler == nil {
		unregistered = append(unregistered, "GetAdminViewRealTimeVolunteerHelpInfoHandler")
	}
	if o.GetVersionHandler == nil {
		unregistered = append(unregistered, "GetVersionHandler")
	}
	if o.GetVolunteerViewOwnMissionHistoryHandler == nil {
		unregistered = append(unregistered, "GetVolunteerViewOwnMissionHistoryHandler")
	}
	if o.PostAdminApproveVolunteerRegistrationHandler == nil {
		unregistered = append(unregistered, "PostAdminApproveVolunteerRegistrationHandler")
	}
	if o.PostAdminDeleteVolunteerHandler == nil {
		unregistered = append(unregistered, "PostAdminDeleteVolunteerHandler")
	}
	if o.PostAdminResetPasswordHandler == nil {
		unregistered = append(unregistered, "PostAdminResetPasswordHandler")
	}
	if o.PostAdminResetVolunteerAvatarToDefaultHandler == nil {
		unregistered = append(unregistered, "PostAdminResetVolunteerAvatarToDefaultHandler")
	}
	if o.PostAdminUpdateVolunteerInfoHandler == nil {
		unregistered = append(unregistered, "PostAdminUpdateVolunteerInfoHandler")
	}
	if o.PostLoginHandler == nil {
		unregistered = append(unregistered, "PostLoginHandler")
	}
	if o.PostLogoutHandler == nil {
		unregistered = append(unregistered, "PostLogoutHandler")
	}
	if o.PostResetPasswordHandler == nil {
		unregistered = append(unregistered, "PostResetPasswordHandler")
	}
	if o.PostUpdateAvatarHandler == nil {
		unregistered = append(unregistered, "PostUpdateAvatarHandler")
	}
	if o.PostUploadAvatarHandler == nil {
		unregistered = append(unregistered, "PostUploadAvatarHandler")
	}
	if o.PostVolunteerAcceptMissionHandler == nil {
		unregistered = append(unregistered, "PostVolunteerAcceptMissionHandler")
	}
	if o.PostVolunteerConnectGuideCaneCameraHandler == nil {
		unregistered = append(unregistered, "PostVolunteerConnectGuideCaneCameraHandler")
	}
	if o.PostVolunteerRegisterHandler == nil {
		unregistered = append(unregistered, "PostVolunteerRegisterHandler")
	}
	if o.PostVolunteerUploadIDBackHandler == nil {
		unregistered = append(unregistered, "PostVolunteerUploadIDBackHandler")
	}
	if o.PostVolunteerUploadIDFrontHandler == nil {
		unregistered = append(unregistered, "PostVolunteerUploadIDFrontHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *BrightPathAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *BrightPathAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *BrightPathAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *BrightPathAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *BrightPathAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *BrightPathAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the bright path API
func (o *BrightPathAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *BrightPathAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/viewRealTimeVolunteerHelpInfo"] = NewGetAdminViewRealTimeVolunteerHelpInfo(o.context, o.GetAdminViewRealTimeVolunteerHelpInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/version"] = NewGetVersion(o.context, o.GetVersionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/volunteer/viewOwnMissionHistory"] = NewGetVolunteerViewOwnMissionHistory(o.context, o.GetVolunteerViewOwnMissionHistoryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/approveVolunteerRegistration"] = NewPostAdminApproveVolunteerRegistration(o.context, o.PostAdminApproveVolunteerRegistrationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/deleteVolunteer"] = NewPostAdminDeleteVolunteer(o.context, o.PostAdminDeleteVolunteerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/resetPassword"] = NewPostAdminResetPassword(o.context, o.PostAdminResetPasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/resetVolunteerAvatarToDefault"] = NewPostAdminResetVolunteerAvatarToDefault(o.context, o.PostAdminResetVolunteerAvatarToDefaultHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/updateVolunteerInfo"] = NewPostAdminUpdateVolunteerInfo(o.context, o.PostAdminUpdateVolunteerInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/login"] = NewPostLogin(o.context, o.PostLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/logout"] = NewPostLogout(o.context, o.PostLogoutHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/resetPassword"] = NewPostResetPassword(o.context, o.PostResetPasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/updateAvatar"] = NewPostUpdateAvatar(o.context, o.PostUpdateAvatarHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/uploadAvatar"] = NewPostUploadAvatar(o.context, o.PostUploadAvatarHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/volunteer/acceptMission"] = NewPostVolunteerAcceptMission(o.context, o.PostVolunteerAcceptMissionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/volunteer/connectGuideCaneCamera"] = NewPostVolunteerConnectGuideCaneCamera(o.context, o.PostVolunteerConnectGuideCaneCameraHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/volunteer/register"] = NewPostVolunteerRegister(o.context, o.PostVolunteerRegisterHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/volunteer/uploadIdBack"] = NewPostVolunteerUploadIDBack(o.context, o.PostVolunteerUploadIDBackHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/volunteer/uploadIdFront"] = NewPostVolunteerUploadIDFront(o.context, o.PostVolunteerUploadIDFrontHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *BrightPathAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *BrightPathAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *BrightPathAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *BrightPathAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *BrightPathAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
