// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostVolunteerRegisterHandlerFunc turns a function with the right signature into a post volunteer register handler
type PostVolunteerRegisterHandlerFunc func(PostVolunteerRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostVolunteerRegisterHandlerFunc) Handle(params PostVolunteerRegisterParams) middleware.Responder {
	return fn(params)
}

// PostVolunteerRegisterHandler interface for that can handle valid post volunteer register params
type PostVolunteerRegisterHandler interface {
	Handle(PostVolunteerRegisterParams) middleware.Responder
}

// NewPostVolunteerRegister creates a new http.Handler for the post volunteer register operation
func NewPostVolunteerRegister(ctx *middleware.Context, handler PostVolunteerRegisterHandler) *PostVolunteerRegister {
	return &PostVolunteerRegister{Context: ctx, Handler: handler}
}

/*
	PostVolunteerRegister swagger:route POST /volunteer/register postVolunteerRegister

PostVolunteerRegister post volunteer register API
*/
type PostVolunteerRegister struct {
	Context *middleware.Context
	Handler PostVolunteerRegisterHandler
}

func (o *PostVolunteerRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostVolunteerRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostVolunteerRegisterBody post volunteer register body
//
// swagger:model PostVolunteerRegisterBody
type PostVolunteerRegisterBody struct {

	// 头像
	// Required: true
	Avatar *string `json:"avatar"`

	// 邮箱
	// Required: true
	Email *string `json:"email"`

	// 身份证反面
	// Required: true
	IDCardBack *string `json:"idCardBack"`

	// 身份证正面
	// Required: true
	IDCardFront *string `json:"idCardFront"`

	// 身份证号
	// Required: true
	IDNumber *string `json:"idNumber"`

	// 电话
	// Required: true
	Phone *string `json:"phone"`

	// 真实姓名
	// Required: true
	RealName *string `json:"realName"`

	// 志愿者描述
	// Required: true
	VolunteerDesc *string `json:"volunteerDesc"`

	// 志愿者名字
	// Required: true
	VolunteerName *string `json:"volunteerName"`

	// 志愿者时间
	// Required: true
	VolunteerTime *string `json:"volunteerTime"`
}

// Validate validates this post volunteer register body
func (o *PostVolunteerRegisterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIDCardBack(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIDCardFront(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIDNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRealName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolunteerDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolunteerName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolunteerTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostVolunteerRegisterBody) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"avatar", "body", o.Avatar); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerRegisterBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerRegisterBody) validateIDCardBack(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"idCardBack", "body", o.IDCardBack); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerRegisterBody) validateIDCardFront(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"idCardFront", "body", o.IDCardFront); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerRegisterBody) validateIDNumber(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"idNumber", "body", o.IDNumber); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerRegisterBody) validatePhone(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"phone", "body", o.Phone); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerRegisterBody) validateRealName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"realName", "body", o.RealName); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerRegisterBody) validateVolunteerDesc(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"volunteerDesc", "body", o.VolunteerDesc); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerRegisterBody) validateVolunteerName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"volunteerName", "body", o.VolunteerName); err != nil {
		return err
	}

	return nil
}

func (o *PostVolunteerRegisterBody) validateVolunteerTime(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"volunteerTime", "body", o.VolunteerTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post volunteer register body based on context it is used
func (o *PostVolunteerRegisterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostVolunteerRegisterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostVolunteerRegisterBody) UnmarshalBinary(b []byte) error {
	var res PostVolunteerRegisterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
