// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostVolunteerUploadIDBackHandlerFunc turns a function with the right signature into a post volunteer upload ID back handler
type PostVolunteerUploadIDBackHandlerFunc func(PostVolunteerUploadIDBackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostVolunteerUploadIDBackHandlerFunc) Handle(params PostVolunteerUploadIDBackParams) middleware.Responder {
	return fn(params)
}

// PostVolunteerUploadIDBackHandler interface for that can handle valid post volunteer upload ID back params
type PostVolunteerUploadIDBackHandler interface {
	Handle(PostVolunteerUploadIDBackParams) middleware.Responder
}

// NewPostVolunteerUploadIDBack creates a new http.Handler for the post volunteer upload ID back operation
func NewPostVolunteerUploadIDBack(ctx *middleware.Context, handler PostVolunteerUploadIDBackHandler) *PostVolunteerUploadIDBack {
	return &PostVolunteerUploadIDBack{Context: ctx, Handler: handler}
}

/*
	PostVolunteerUploadIDBack swagger:route POST /volunteer/uploadIdBack postVolunteerUploadIdBack

PostVolunteerUploadIDBack post volunteer upload ID back API
*/
type PostVolunteerUploadIDBack struct {
	Context *middleware.Context
	Handler PostVolunteerUploadIDBackHandler
}

func (o *PostVolunteerUploadIDBack) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostVolunteerUploadIDBackParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
