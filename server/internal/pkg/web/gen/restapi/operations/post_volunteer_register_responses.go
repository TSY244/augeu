// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"augeu/server/internal/pkg/web/gen/models"
)

// PostVolunteerRegisterOKCode is the HTTP code returned for type PostVolunteerRegisterOK
const PostVolunteerRegisterOKCode int = 200

/*
PostVolunteerRegisterOK 注册成功

swagger:response postVolunteerRegisterOK
*/
type PostVolunteerRegisterOK struct {

	/*
	  In: Body
	*/
	Payload *models.VolunteerRegisterResponse `json:"body,omitempty"`
}

// NewPostVolunteerRegisterOK creates PostVolunteerRegisterOK with default headers values
func NewPostVolunteerRegisterOK() *PostVolunteerRegisterOK {

	return &PostVolunteerRegisterOK{}
}

// WithPayload adds the payload to the post volunteer register o k response
func (o *PostVolunteerRegisterOK) WithPayload(payload *models.VolunteerRegisterResponse) *PostVolunteerRegisterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post volunteer register o k response
func (o *PostVolunteerRegisterOK) SetPayload(payload *models.VolunteerRegisterResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVolunteerRegisterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostVolunteerRegisterForbiddenCode is the HTTP code returned for type PostVolunteerRegisterForbidden
const PostVolunteerRegisterForbiddenCode int = 403

/*
PostVolunteerRegisterForbidden 未登录

swagger:response postVolunteerRegisterForbidden
*/
type PostVolunteerRegisterForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.UnauthorizedError `json:"body,omitempty"`
}

// NewPostVolunteerRegisterForbidden creates PostVolunteerRegisterForbidden with default headers values
func NewPostVolunteerRegisterForbidden() *PostVolunteerRegisterForbidden {

	return &PostVolunteerRegisterForbidden{}
}

// WithPayload adds the payload to the post volunteer register forbidden response
func (o *PostVolunteerRegisterForbidden) WithPayload(payload *models.UnauthorizedError) *PostVolunteerRegisterForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post volunteer register forbidden response
func (o *PostVolunteerRegisterForbidden) SetPayload(payload *models.UnauthorizedError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVolunteerRegisterForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostVolunteerRegisterNotFoundCode is the HTTP code returned for type PostVolunteerRegisterNotFound
const PostVolunteerRegisterNotFoundCode int = 404

/*
PostVolunteerRegisterNotFound 用户不存在

swagger:response postVolunteerRegisterNotFound
*/
type PostVolunteerRegisterNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ActionFailure `json:"body,omitempty"`
}

// NewPostVolunteerRegisterNotFound creates PostVolunteerRegisterNotFound with default headers values
func NewPostVolunteerRegisterNotFound() *PostVolunteerRegisterNotFound {

	return &PostVolunteerRegisterNotFound{}
}

// WithPayload adds the payload to the post volunteer register not found response
func (o *PostVolunteerRegisterNotFound) WithPayload(payload *models.ActionFailure) *PostVolunteerRegisterNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post volunteer register not found response
func (o *PostVolunteerRegisterNotFound) SetPayload(payload *models.ActionFailure) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVolunteerRegisterNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
