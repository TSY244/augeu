// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"augeu/server/internal/pkg/web/gen/models"
)

// PostVolunteerUploadIDBackOKCode is the HTTP code returned for type PostVolunteerUploadIDBackOK
const PostVolunteerUploadIDBackOKCode int = 200

/*
PostVolunteerUploadIDBackOK 上传身份证反面成功

swagger:response postVolunteerUploadIdBackOK
*/
type PostVolunteerUploadIDBackOK struct {

	/*
	  In: Body
	*/
	Payload *models.VolunteerUploadIDBackResponse `json:"body,omitempty"`
}

// NewPostVolunteerUploadIDBackOK creates PostVolunteerUploadIDBackOK with default headers values
func NewPostVolunteerUploadIDBackOK() *PostVolunteerUploadIDBackOK {

	return &PostVolunteerUploadIDBackOK{}
}

// WithPayload adds the payload to the post volunteer upload Id back o k response
func (o *PostVolunteerUploadIDBackOK) WithPayload(payload *models.VolunteerUploadIDBackResponse) *PostVolunteerUploadIDBackOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post volunteer upload Id back o k response
func (o *PostVolunteerUploadIDBackOK) SetPayload(payload *models.VolunteerUploadIDBackResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVolunteerUploadIDBackOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostVolunteerUploadIDBackForbiddenCode is the HTTP code returned for type PostVolunteerUploadIDBackForbidden
const PostVolunteerUploadIDBackForbiddenCode int = 403

/*
PostVolunteerUploadIDBackForbidden 未登录

swagger:response postVolunteerUploadIdBackForbidden
*/
type PostVolunteerUploadIDBackForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.UnauthorizedError `json:"body,omitempty"`
}

// NewPostVolunteerUploadIDBackForbidden creates PostVolunteerUploadIDBackForbidden with default headers values
func NewPostVolunteerUploadIDBackForbidden() *PostVolunteerUploadIDBackForbidden {

	return &PostVolunteerUploadIDBackForbidden{}
}

// WithPayload adds the payload to the post volunteer upload Id back forbidden response
func (o *PostVolunteerUploadIDBackForbidden) WithPayload(payload *models.UnauthorizedError) *PostVolunteerUploadIDBackForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post volunteer upload Id back forbidden response
func (o *PostVolunteerUploadIDBackForbidden) SetPayload(payload *models.UnauthorizedError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVolunteerUploadIDBackForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostVolunteerUploadIDBackNotFoundCode is the HTTP code returned for type PostVolunteerUploadIDBackNotFound
const PostVolunteerUploadIDBackNotFoundCode int = 404

/*
PostVolunteerUploadIDBackNotFound 用户不存在

swagger:response postVolunteerUploadIdBackNotFound
*/
type PostVolunteerUploadIDBackNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ActionFailure `json:"body,omitempty"`
}

// NewPostVolunteerUploadIDBackNotFound creates PostVolunteerUploadIDBackNotFound with default headers values
func NewPostVolunteerUploadIDBackNotFound() *PostVolunteerUploadIDBackNotFound {

	return &PostVolunteerUploadIDBackNotFound{}
}

// WithPayload adds the payload to the post volunteer upload Id back not found response
func (o *PostVolunteerUploadIDBackNotFound) WithPayload(payload *models.ActionFailure) *PostVolunteerUploadIDBackNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post volunteer upload Id back not found response
func (o *PostVolunteerUploadIDBackNotFound) SetPayload(payload *models.ActionFailure) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVolunteerUploadIDBackNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
