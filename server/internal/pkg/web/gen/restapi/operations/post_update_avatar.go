// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUpdateAvatarHandlerFunc turns a function with the right signature into a post update avatar handler
type PostUpdateAvatarHandlerFunc func(PostUpdateAvatarParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUpdateAvatarHandlerFunc) Handle(params PostUpdateAvatarParams) middleware.Responder {
	return fn(params)
}

// PostUpdateAvatarHandler interface for that can handle valid post update avatar params
type PostUpdateAvatarHandler interface {
	Handle(PostUpdateAvatarParams) middleware.Responder
}

// NewPostUpdateAvatar creates a new http.Handler for the post update avatar operation
func NewPostUpdateAvatar(ctx *middleware.Context, handler PostUpdateAvatarHandler) *PostUpdateAvatar {
	return &PostUpdateAvatar{Context: ctx, Handler: handler}
}

/*
	PostUpdateAvatar swagger:route POST /updateAvatar postUpdateAvatar

PostUpdateAvatar post update avatar API
*/
type PostUpdateAvatar struct {
	Context *middleware.Context
	Handler PostUpdateAvatarHandler
}

func (o *PostUpdateAvatar) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostUpdateAvatarParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostUpdateAvatarBody post update avatar body
//
// swagger:model PostUpdateAvatarBody
type PostUpdateAvatarBody struct {

	// 头像
	// Required: true
	Avatar *string `json:"avatar"`

	// 用户id
	// Required: true
	Userid *string `json:"userid"`
}

// Validate validates this post update avatar body
func (o *PostUpdateAvatarBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUpdateAvatarBody) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"avatar", "body", o.Avatar); err != nil {
		return err
	}

	return nil
}

func (o *PostUpdateAvatarBody) validateUserid(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"userid", "body", o.Userid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post update avatar body based on context it is used
func (o *PostUpdateAvatarBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUpdateAvatarBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUpdateAvatarBody) UnmarshalBinary(b []byte) error {
	var res PostUpdateAvatarBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
