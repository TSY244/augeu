// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WeiBuNetwork wei bu network
//
// swagger:model WeiBuNetwork
type WeiBuNetwork struct {

	// dead hosts
	// Required: true
	DeadHosts []string `json:"dead_hosts"`

	// dns
	// Required: true
	DNS []string `json:"dns"`

	// dns servers
	// Required: true
	DNSServers []string `json:"dns_servers"`

	// domains
	// Required: true
	Domains []string `json:"domains"`

	// fingerprint
	// Required: true
	Fingerprint []string `json:"fingerprint"`

	// hosts
	// Required: true
	Hosts []string `json:"hosts"`

	// http
	// Required: true
	HTTP []string `json:"http"`

	// http ex
	// Required: true
	HTTPEx []string `json:"http_ex"`

	// https ex
	// Required: true
	HTTPSEx []string `json:"https_ex"`

	// icmp
	// Required: true
	Icmp []string `json:"icmp"`

	// irc
	// Required: true
	Irc []string `json:"irc"`

	// mitm
	// Required: true
	Mitm []string `json:"mitm"`

	// smtp
	// Required: true
	SMTP []string `json:"smtp"`

	// smtp ex
	// Required: true
	SMTPEx []string `json:"smtp_ex"`

	// tcp
	// Required: true
	TCP []string `json:"tcp"`

	// tls
	// Required: true
	TLS []string `json:"tls"`

	// udp
	// Required: true
	UDP []string `json:"udp"`
}

// Validate validates this wei bu network
func (m *WeiBuNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeadHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPEx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPSEx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcmp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIrc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPEx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUDP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeiBuNetwork) validateDeadHosts(formats strfmt.Registry) error {

	if err := validate.Required("dead_hosts", "body", m.DeadHosts); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateDNS(formats strfmt.Registry) error {

	if err := validate.Required("dns", "body", m.DNS); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateDNSServers(formats strfmt.Registry) error {

	if err := validate.Required("dns_servers", "body", m.DNSServers); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateDomains(formats strfmt.Registry) error {

	if err := validate.Required("domains", "body", m.Domains); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("fingerprint", "body", m.Fingerprint); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateHosts(formats strfmt.Registry) error {

	if err := validate.Required("hosts", "body", m.Hosts); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateHTTP(formats strfmt.Registry) error {

	if err := validate.Required("http", "body", m.HTTP); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateHTTPEx(formats strfmt.Registry) error {

	if err := validate.Required("http_ex", "body", m.HTTPEx); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateHTTPSEx(formats strfmt.Registry) error {

	if err := validate.Required("https_ex", "body", m.HTTPSEx); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateIcmp(formats strfmt.Registry) error {

	if err := validate.Required("icmp", "body", m.Icmp); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateIrc(formats strfmt.Registry) error {

	if err := validate.Required("irc", "body", m.Irc); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateMitm(formats strfmt.Registry) error {

	if err := validate.Required("mitm", "body", m.Mitm); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateSMTP(formats strfmt.Registry) error {

	if err := validate.Required("smtp", "body", m.SMTP); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateSMTPEx(formats strfmt.Registry) error {

	if err := validate.Required("smtp_ex", "body", m.SMTPEx); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateTCP(formats strfmt.Registry) error {

	if err := validate.Required("tcp", "body", m.TCP); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateTLS(formats strfmt.Registry) error {

	if err := validate.Required("tls", "body", m.TLS); err != nil {
		return err
	}

	return nil
}

func (m *WeiBuNetwork) validateUDP(formats strfmt.Registry) error {

	if err := validate.Required("udp", "body", m.UDP); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this wei bu network based on context it is used
func (m *WeiBuNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WeiBuNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WeiBuNetwork) UnmarshalBinary(b []byte) error {
	var res WeiBuNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
